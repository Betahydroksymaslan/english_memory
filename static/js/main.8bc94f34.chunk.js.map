{"version":3,"sources":["assets/images/londonImage.svg","components/Home/Home.js","components/Back/Back.js","assets/firebase.js","components/AddWords/AddWords.js","store/Store.js","components/Card/Card.js","components/RandomTen/RandomTen.js","components/App/App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Home","useState","isFlashlightsClicked","setIsFlashlightsClicked","useRef","useEffect","gsap","timeline","defaults","ease","className","src","londonImage","alt","ref","el","onClick","to","Back","history","useHistory","goBack","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AddWords","engValue","setEngValue","plValue","setPlValue","categoryValue","setCategoryValue","value","onChange","e","target","type","preventDefault","database","set","AppContext","createContext","Store","children","words","setWords","unsubscribe","wordsRef","on","snapshot","wordsValue","val","temporaryData","id","push","Provider","Card","PL_WORD","ENG_WORD","isFlipped","setIsFlipped","RandomTen","match","useContext","filteredWords","setFilteredWords","currentCard","setCurrentCard","map","item","sort","Math","random","splice","params","flashlightCategory","length","setNewData","listOfCards","prevState","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8bc94f34.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/londonImage.3fc3c4ee.svg\";","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport londonImage from \"../../assets/images/londonImage.svg\";\r\nimport gsap from \"gsap\";\r\n\r\nconst Home = () => {\r\n  const [isFlashlightsClicked, setIsFlashlightsClicked] = useState(false);\r\n\r\n  const handleBack = () => setIsFlashlightsClicked(false);\r\n  const handleFlashlightsCLick = () => setIsFlashlightsClicked(true);\r\n\r\n  let menuWrapper = useRef(null);\r\n  let flashlightsWrapper = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const tl = gsap.timeline({ defaults: { ease: \"power3.inOut\" } });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <div className=\"Home__headerWrapper\">\r\n        <img src={londonImage} alt=\"bus Image\" className=\"Home__headerImage\" />\r\n      </div>\r\n\r\n      {isFlashlightsClicked ? (\r\n        <div\r\n          ref={(el) => (flashlightsWrapper = el)}\r\n          className=\"Home__contentWrapperFlashlights\"\r\n        >\r\n          <h1 className=\"Home__contentHeader\">Check type of flashlights</h1>\r\n          <p className=\"Home__contentBack\" onClick={handleBack}>\r\n            Back\r\n          </p>\r\n          <div className=\"Home__flashlightsCategoriesWrapper\">\r\n            <Link\r\n              to=\"/english_memory/flashlights/1\"\r\n              className=\"Home__flashlightsCategories\"\r\n            >\r\n              <p className=\"Home__flashlightsCategoriesBody\">10</p>\r\n              <p className=\"Home__flashlightsCategoriesTxt Home__flashlightsCategoriesBody--txt\">\r\n                Cards\r\n              </p>\r\n            </Link>\r\n            <Link\r\n              to=\"/english_memory/flashlights/25\"\r\n              className=\"Home__flashlightsCategories\"\r\n            >\r\n              <p className=\"Home__flashlightsCategoriesBody\">25</p>\r\n              <p className=\"Home__flashlightsCategoriesTxt Home__flashlightsCategoriesBody--txt\">\r\n                Cards\r\n              </p>\r\n            </Link>\r\n            <Link\r\n              to=\"/english_memory/flashlights/select\"\r\n              className=\"Home__flashlightsCategories\"\r\n            >\r\n              <p className=\"Home__flashlightsCategoriesBody\">Select</p>\r\n              <p className=\"Home__flashlightsCategoriesTxt Home__flashlightsCategoriesBody--txt\">\r\n                Cards\r\n              </p>\r\n            </Link>\r\n            <Link\r\n              to=\"/english_memory/flashlights/all\"\r\n              className=\"Home__flashlightsCategories\"\r\n            >\r\n              <p className=\"Home__flashlightsCategoriesBody\">Unlimited</p>\r\n              <p className=\"Home__flashlightsCategoriesTxt Home__flashlightsCategoriesBody--txt\">\r\n                Cards\r\n              </p>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div ref={(el) => (menuWrapper = el)} className=\"Home__contentWrapper\">\r\n          <h1 className=\"Home__contentHeader\">English flashlights & tests</h1>\r\n\r\n          <Link to=\"/english_memory/addWords\" className=\"Home__AddWordsButton\">\r\n            ADD WORDS\r\n          </Link>\r\n\r\n          <div\r\n            onClick={handleFlashlightsCLick}\r\n            className=\"Home__RandomTenButton\"\r\n          >\r\n            FLASHLIGHTS\r\n          </div>\r\n\r\n          <Link\r\n            to=\"/english_memory/randomTen\"\r\n            className=\"Home__RandomTenButton\"\r\n          >\r\n            LIMITED TEST\r\n          </Link>\r\n          <Link\r\n            to=\"/english_memory/randomTen\"\r\n            className=\"Home__RandomTenButton\"\r\n          >\r\n            UNLIMITED TEST\r\n          </Link>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst Back = () => {\r\n    const history = useHistory();\r\n    \r\n    return ( \r\n        <p className=\"Back\" onClick={() => history.goBack()}>\r\n        Back\r\n      </p>\r\n     );\r\n}\r\n \r\nexport default Back;","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBLWtqkNeJUtefV-jJM6sNMvW_2L6GILT8\",\r\n  authDomain: \"english-memory.firebaseapp.com\",\r\n  databaseURL: \"https://english-memory-default-rtdb.europe-west1.firebasedatabase.app\",\r\n  projectId: \"english-memory\",\r\n  storageBucket: \"english-memory.appspot.com\",\r\n  messagingSenderId: \"377126105924\",\r\n  appId: \"1:377126105924:web:58fe9f8a1782320da49d11\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { useState } from \"react\";\r\nimport Back from '../Back/Back';\r\nimport firebase from \"../../assets/firebase\";\r\nimport \"firebase/database\";\r\n\r\nconst AddWords = () => {\r\n  const [engValue, setEngValue] = useState(\"\");\r\n  const [plValue, setPlValue] = useState(\"\");\r\n  const [categoryValue, setCategoryValue] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if ((engValue, plValue, categoryValue)) {\r\n      firebase\r\n        .database()\r\n        .ref(\"/words/\" + plValue)\r\n        .set({\r\n          engValue,\r\n          plValue,\r\n          categoryValue,\r\n        });\r\n    } else return\r\n    \r\n    setEngValue('');\r\n    setPlValue('');\r\n    setCategoryValue('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"AddWords\">\r\n      <Back />\r\n\r\n      <form className=\"AddWords__form\">\r\n        <h1 className=\"AddWords__formHeader\">Dodaj słówko</h1>\r\n\r\n        <label className=\"AddWords__engWordLabel\">\r\n          Eng\r\n          <input\r\n            value={engValue}\r\n            onChange={(e) => setEngValue(e.target.value)}\r\n            type=\"text\"\r\n            className=\"AddWords__engWordInput\"\r\n          />\r\n        </label>\r\n\r\n        <label className=\"AddWords__plWordLabel\">\r\n          Pl\r\n          <input\r\n            value={plValue}\r\n            onChange={(e) => setPlValue(e.target.value)}\r\n            type=\"text\"\r\n            className=\"AddWords__plWordInput\"\r\n          />\r\n        </label>\r\n\r\n        <label className=\"AddWords__wordCategoryLabel\">\r\n          Kategoria\r\n          <input\r\n            value={categoryValue}\r\n            onChange={(e) => setCategoryValue(e.target.value)}\r\n            type=\"text\"\r\n            className=\"AddWords__wordCategoryInput\"\r\n          />\r\n        </label>\r\n\r\n        <button onClick={handleSubmit} className=\"AddWords__formButton\">\r\n          DODAJ\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddWords;\r\n","import React, { createContext, useState, useEffect } from \"react\";\r\nimport firebase from \"../assets/firebase\";\r\nimport \"firebase/database\";\r\n\r\nexport const AppContext = createContext();\r\n\r\nconst Store = ({ children }) => {\r\n  const [words, setWords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n\r\n    const wordsRef = firebase.database().ref(\"/words\");\r\n    const watch = () => {\r\n      unsubscribe = wordsRef.on(\"value\", (snapshot) => {\r\n        const wordsValue = snapshot.val();\r\n        const temporaryData = [];\r\n        for (let id in wordsValue) {\r\n          temporaryData.push(wordsValue[id]);\r\n        }\r\n        setWords(temporaryData);\r\n      });\r\n    };\r\n    watch();\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        words,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Store;\r\n","import React, {useState} from 'react';\r\n\r\nconst Card = ({PL_WORD, ENG_WORD}) => {\r\n    const [isFlipped, setIsFlipped] = useState(false);\r\n\r\n    const flipHandle = () => {\r\n        setIsFlipped(!isFlipped);\r\n      };\r\n\r\n    return ( \r\n        <div onClick={flipHandle} className=\"Card\">\r\n        <div\r\n          className={\r\n            isFlipped\r\n              ? \"Card__cardInner Card__cardInner--isFlipped\"\r\n              : \"Card__cardInner\"\r\n          }\r\n        >\r\n          <div className=\"Card__cardFace Card__cardFace--front\">\r\n            <h2>{PL_WORD}</h2>\r\n          </div>\r\n          <div className=\"Card__cardFace Card__cardFace--back\">\r\n            <div className=\"Card__cardContent\">\r\n              <div className=\"Card__cardHeader\">\r\n                <h2>{ENG_WORD}</h2>\r\n              </div>\r\n              <div className=\"Card__cardBody\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n     );\r\n}\r\n \r\nexport default Card;","import React, { useState, useContext, useEffect } from \"react\";\r\nimport Back from \"../Back/Back\";\r\nimport { AppContext } from \"../../store/Store\";\r\nimport Card from \"../Card/Card\";\r\n//import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n//import { faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst RandomTen = ({ match }) => {\r\n  const { words } = useContext(AppContext);\r\n\r\n  const [filteredWords, setFilteredWords] = useState([]);\r\n  const [currentCard, setCurrentCard] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const setNewData = () => {\r\n      const temporaryData = [];\r\n      words.map((item) => temporaryData.push(item));\r\n      temporaryData.sort(() => Math.random() - 0.5);\r\n      temporaryData.splice(\r\n        match.params.flashlightCategory,\r\n        temporaryData.length\r\n      );\r\n      setFilteredWords(temporaryData);\r\n    };\r\n\r\n    setNewData();\r\n  }, [match.params.flashlightCategory]);\r\n\r\n  const handleCountNextCard = () =>\r\n    setCurrentCard((prevState) => prevState + 1);\r\n\r\n  const handleCountPreviousCard = () => {\r\n    if (currentCard > 0) {\r\n      setCurrentCard((prevState) => prevState - 1);\r\n    } else return\r\n  };\r\n\r\n  const listOfCards = filteredWords.map((item) => (\r\n    <Card key={item.plValue} PL_WORD={item.plValue} ENG_WORD={item.engValue} />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"RandomTen\">\r\n      <Back />\r\n      <span className=\"RandomTen__currentCardCounter\">{`${currentCard} / ${match.params.flashlightCategory}`}</span>\r\n      {words.length && listOfCards}\r\n      <div className=\"RandomTen__navigation\">\r\n        <div\r\n          className=\"RandomTen__navLeft\"\r\n          onClick={handleCountPreviousCard}\r\n        ></div>\r\n        <div\r\n          className=\"RandomTen__navRight\"\r\n          onClick={handleCountNextCard}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RandomTen;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"../Home/Home\";\nimport AddWords from \"../AddWords/AddWords\";\nimport RandomTen from \"../RandomTen/RandomTen\";\nimport Store from \"../../store/Store\";\n\nfunction App() {\n  return (\n    <Store>\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/english_memory\" component={Home} />\n            <Route path=\"/english_memory/addWords\" component={AddWords} />\n            <Route path=\"/english_memory/flashlights/:flashlightCategory\" component={RandomTen} />\n          </Switch>\n        </div>\n      </Router>\n    </Store>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorkerRegistration.register();"],"sourceRoot":""}